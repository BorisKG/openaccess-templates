<#+
public class ClassGenerator : Telerik.OpenAccess.CodeGeneration.TelerikTextTransformationBase
{
	protected AttributesGenerator attributesGenerator;
	protected DocumentationGenerator documentationGenerator;
	protected PropertiesGenerator propertiesGenerator;
	protected bool isAttributesMapping;

	public ClassGenerator(TextTransformation rootGenerator, AttributesGenerator attributesGenerator, 
		DocumentationGenerator documentationGenerator, PropertiesGenerator propertiesGenerator, Telerik.OpenAccess.Metadata.MappingDefinitionType mappingType)
		:base(rootGenerator)
    {
		this.attributesGenerator = attributesGenerator;
		this.documentationGenerator = documentationGenerator;
		this.propertiesGenerator = propertiesGenerator;
		this.isAttributesMapping = mappingType == Telerik.OpenAccess.Metadata.MappingDefinitionType.Attributes;
	}

	/// <summary>
	/// Generates a class.
	/// </summary>
	/// <param name="@class">The class model.</param>
	public void GenerateClass(Telerik.OpenAccess.CodeGeneration.CodeClass @class)
	{
		this.documentationGenerator.GenerateComments(@class.Comments);	
		this.documentationGenerator.GenerateSummary(@class.Summary);
		this.attributesGenerator.GenerateAttributes(@class.Attributes);
		this.GenerateClassSignature(@class);
		this.PushIndent("\t");
		this.propertiesGenerator.GenerateProperties(@class);
				
		this.GenerateINotifyDataErrorInfoValidationMethods(@class);
        if (@class.BaseClass == null)
        {
			this.GenerateINotifyDataErrorInfoMembers();
            if (@class.Properties.Any(p => p.Attributes.Any(a => a.ImportNamespace == "System.ComponentModel.DataAnnotations")))
            {
				this.GenerateDataAnnotationValidationRegion();
            }
        }

		if (@class.ImplementIDataErrorInfo)
        {
			if(@class.BaseClass == null)
            {
				this.GenerateIDataErrorInfoMembers();
            }
			else
            {
				this.GenerateIDataErrorInfoInDerivedClass();
			}
        }

        if (@class.ImplementINotifyPropertyChanging && @class.BaseClass == null)
        {
			this.GenerateINotifyPropertyChangingMembers();
        }

        if (@class.ImplementINotifyPropertyChanged && @class.BaseClass == null)
        {
			this.GenerateINotifyPropertyChangedMembers();
        }

		this.PopIndent();
#>
End Class
<#+ 
	}

	protected void GenerateClassSignature(Telerik.OpenAccess.CodeGeneration.CodeClass codeClass)
	{
		var implements = codeClass.Implements.Select(i => i.Name);
		var interfacesString = string.Join(", ", implements);
#>
<#= codeClass.TypeAccessModifier.ToCode() #><#= codeClass.TypeInheritanceModifier.ToCode() #> Partial Class <#= codeClass.Name #>
<#+
		if (codeClass.BaseClass != null)
		{
#>
	Inherits <#= codeClass.BaseClass.Name #>
<#+
        }

		if (string.IsNullOrWhiteSpace(interfacesString) == false)
        {
#>
	Implements <#= interfacesString #>
<#+
		}
    }

	protected void GenerateINotifyDataErrorInfoMembers()
    {
#>
#Region "INotifyDataErrorInfo Members"

Protected errors As IDictionary(Of String, List(Of String)) = New Dictionary(Of String, List(Of String))()

Public Event ErrorsChanged As EventHandler(Of DataErrorsChangedEventArgs) Implements INotifyDataErrorInfo.ErrorsChanged

Public Function GetErrors(ByVal propertyName As String) As System.Collections.IEnumerable Implements INotifyDataErrorInfo.GetErrors
	If String.IsNullOrEmpty(propertyName) OrElse Me.errors.ContainsKey(propertyName) = False Then
		Return Nothing
	End If

	Return Me.errors(propertyName)
End Function

Public ReadOnly Property HasErrors() As Boolean Implements INotifyDataErrorInfo.HasErrors
	Get
		Dim result As Boolean = Me.errors.Count > 0

		Return result
	End Get
End Property

Protected Overridable Sub AddError(ByVal propertyName As String, ByVal [error] As String)
	If Me.errors.ContainsKey(propertyName) = False Then
		Me.errors(propertyName) = New List(Of String)()
	End If

	If Me.errors(propertyName).Contains([error]) = False Then
		Me.errors(propertyName).Add([error])
		Me.RaiseErrorsChanged(propertyName)
	End If
End Sub

Protected Overridable Sub RemoveError(ByVal propertyName As String, ByVal [error] As String)
	If Me.errors.ContainsKey(propertyName) AndAlso Me.errors(propertyName).Contains([error]) Then
		Me.errors(propertyName).Remove([error])
		If Me.errors(propertyName).Count = 0 Then
			Me.errors.Remove(propertyName)
		End If

		Me.RaiseErrorsChanged(propertyName)
	End If
End Sub

Protected Overridable Sub RaiseErrorsChanged(ByVal propertyName As String)
	RaiseEvent ErrorsChanged(Me, New DataErrorsChangedEventArgs(propertyName))
End Sub

#End Region

<#+
    }
	
	protected void GenerateINotifyDataErrorInfoValidationMethods(Telerik.OpenAccess.CodeGeneration.CodeClass @class)
	{
#>

'To define your custom validation logic implement the target partial method in a partial class as shown below:
'Public Const LestThanZeroMsg As String = "The Id cannot be less then 0"
'Private Sub ValidateId(ByVal propertyName As String, ByVal newValue As Integer)
'	If newValue < 0 Then
'		Me.AddError(propertyName, LestThanZeroMsg)
'	Else
'		Me.RemoveError(propertyName, LestThanZeroMsg)
'	End If
'End Sub
#Region "INotifyDataErrorInfo Validation Methods"

<#+
		foreach(var property in @class.Properties)
		{
            if (property.HasSetter && property.IsNavigationProperty == false &&  property.IsAbstract == false)
            {
				this.GenerateValidationMethod(property);
            }
		}
#>
#End Region

<#+
	}
	
	protected void GenerateValidationMethod(Telerik.OpenAccess.CodeGeneration.CodeProperty property)
	{
#>
Partial Private Sub Validate<#= property.Name #>(ByVal propertyName As String, ByVal newValue As <#= property.ToTypeString() #>)
End Sub

<#+
	}

	protected void GenerateDataAnnotationValidationRegion()
    {
#>
#Region "DataAnnotationValidation"

Protected dataAnnotationErrors As IDictionary(Of String, List(Of String)) = New Dictionary(Of String, List(Of String))()

Protected Overridable Sub DataAnnotationValidate(ByVal propertyName As String, ByVal value As Object)
	Dim validationResults As New List(Of System.ComponentModel.DataAnnotations.ValidationResult)()

	Validator.TryValidateProperty(value, New ValidationContext(Me, Nothing, Nothing) With {.MemberName = propertyName}, validationResults)

	Me.AddDataAnnotationErrors(propertyName, validationResults)
End Sub

Private Sub AddDataAnnotationErrors(ByVal propertyName As String, ByVal validationResults As List(Of System.ComponentModel.DataAnnotations.ValidationResult))
	Dim oldErrors As List(Of String) = Nothing
	If Me.dataAnnotationErrors.TryGetValue(propertyName, oldErrors) Then
		Dim errorsToRemove As IEnumerable(Of String) = From err In oldErrors
		                                               Where validationResults.Any(Function(vr) String.Equals(vr.ErrorMessage, err, StringComparison.OrdinalIgnoreCase)) = False
		                                               Select err

		For Each missingError As String In errorsToRemove
			Me.RemoveError(propertyName, missingError)
		Next missingError
	End If

	For Each vr As System.ComponentModel.DataAnnotations.ValidationResult In validationResults
		Me.AddError(propertyName, vr.ErrorMessage)
	Next vr

	Me.dataAnnotationErrors(propertyName) = validationResults.Select(Function(vr) vr.ErrorMessage).ToList()
End Sub

#End Region

<#+
    }

	protected void GenerateIDataErrorInfoMembers()
    {
#>
#Region "IDataErrorInfo members"

<#+
		if(this.isAttributesMapping)
        {
			this.attributesGenerator.GenerateTransientAttribute();
		}
#>
Private _error As String = String.Empty
<#+
		if(this.isAttributesMapping)
        {
			this.attributesGenerator.GenerateTransientAttribute();
		}
#>
Public ReadOnly Property [Error]() As String Implements IDataErrorInfo.Error
	Get
		Return Me._error
	End Get
End Property

<#+
		if(this.isAttributesMapping)
        {
			this.attributesGenerator.GenerateTransientAttribute();
		}
#>
Public ReadOnly Property Item(ByVal propertyName As String) As String Implements IDataErrorInfo.Item
	Get
		Me.ValidatePropertyInternal(propertyName, Me._error)

		Return Me._error
	End Get
End Property

Protected Overridable Sub ValidatePropertyInternal(propertyName As String, ByRef [error] As String)
	Me.ValidateProperty(propertyName, [error])
End Sub

' Please implement this method in a partial class in order to provide the error message depending on each of the properties.
Partial Private Sub ValidateProperty(ByVal propertyName As String, ByRef _error As String)
End Sub

#End Region

<#+
    }

	protected void GenerateIDataErrorInfoInDerivedClass()
    {
#>
#Region "IDataErrorInfo members"

Protected Overrides Sub ValidatePropertyInternal(propertyName As String, ByRef [error] As String)
	Me.ValidateProperty(propertyName, [error])
End Sub

' Please implement this method in a partial class in order to provide the error message depending on each of the properties.
Partial Private Sub ValidateProperty(ByVal propertyName As String, ByRef _error As String)
End Sub

#End Region

<#+
    }

	protected void GenerateINotifyPropertyChangingMembers()
	{
#>
#Region "INotifyPropertyChanging members"

Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

Protected Overridable Sub OnPropertyChanging(ByVal propertyName As String)
	RaiseEvent PropertyChanging(Me, New PropertyChangingEventArgs(propertyName))
End Sub

#End Region

<#+
    }

	protected void GenerateINotifyPropertyChangedMembers()
    {
#>
#Region "INotifyPropertyChanged members"

Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

Protected Overridable Sub OnPropertyChanged(ByVal propertyName As String)
	RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
End Sub

#End Region

<#+
	}
}
#>